unit uAvarias;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, adLabelEdit, ExtCtrls, fCtrls, TFlatPanelUnit,
  TFlatButtonUnit, Grids, DBGrids, SoftDBGrid, mxExport, DB, ADODB,
  ImgList, Menus, adLabelNumericEdit;

type
  TfmCadAvarias = class(TForm)
    pnDados: TPanel;
    Bevel1: TBevel;
    lbIs_ref: TLabel;
    lbCdref: TLabel;
    edCodigo: TadLabelEdit;
    EdDesc: TadLabelEdit;
    edQuant: TadLabelEdit;
    edObs: TadLabelEdit;
    pnTitulo: TFlatPanel;
    Label1: TLabel;
    lbNumAvaria: TLabel;
    Label4: TLabel;
    lbLoja: TLabel;
    Label2: TLabel;
    lbDtAvaria: TLabel;
    Label5: TLabel;
    lbStatus: TLabel;
    Label6: TLabel;
    Label3: TLabel;
    lbdtAprov: TLabel;
    lbtipo: TLabel;
    Label7: TLabel;
    lbuo: TLabel;
    Label8: TLabel;
    lbTotal: TLabel;
    mmObs: TfsMemo;
    menuAvarias: TMainMenu;
    Nova1: TMenuItem;
    Abrir1: TMenuItem;
    Aprovar1: TMenuItem;
    Imprimir1: TMenuItem;
    Exportar1: TMenuItem;
    DataSource1: TDataSource;
    pnOperacoes: TPanel;
    BitBtn3: TFlatButton;
    BitBtn5: TFlatButton;
    pnConfirma: TPanel;
    BitBtn1: TFlatButton;
    btCancela: TFlatButton;
    Grid: TSoftDBGrid;
    cbOrigemAvaria: TfsComboBox;
    fsLabel1: TfsLabel;
    ednResponsavel: TadLabelEdit;
    lbMNPes: TLabel;
    lbCD_pes: TLabel;
    edPcSugerido: TadLabelNumericEdit;
    edPreco: TadLabelNumericEdit;
    Relatrios1: TMenuItem;
    Imprimirrelaodeavaria1: TMenuItem;
    Vendadeprodutosavariados1: TMenuItem;
    ransferirAvaria1: TMenuItem;
    tbItensAv: TADOTable;
    lbRef: TLabel;
    procedure AbreFmPesqLista(tag:integer);
    function  VerificaPreenchimento(): String;
    function isAvariaAprovada():boolean;
    procedure CarregaItensAvarias(numero:string; loja:String);
    procedure carregarCabecalhoAvarias(numero,loja:string);
    procedure Nova1Click(Sender: TObject);
    procedure BitBtn3Click(Sender: TObject);
    procedure editaItenAvaria();
    procedure edCodigoKeyDown(Sender: TObject; var Key: Word;  Shift: TShiftState);
    procedure BitBtn5Click(Sender: TObject);
    procedure BitBtn1Click(Sender: TObject);
    procedure DesabilitaItens();
    procedure LimparCampos();
    procedure FormKeyPress(Sender: TObject; var Key: Char);
    procedure Abrir1Click(Sender: TObject);
    procedure Aprovar1Click(Sender: TObject);
    procedure EdDescEnter(Sender: TObject);
    procedure btCancelaClick(Sender: TObject);
    procedure edQuantExit(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure Exportar1Click(Sender: TObject);
    procedure GridCellClick(Column: TColumn);
    procedure FormResize(Sender: TObject);
    procedure Relatrios1Click(Sender: TObject);
    procedure Imprimirrelaodeavaria1Click(Sender: TObject);
    procedure Vendadeprodutosavariados1Click(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure GridTitleClick(Column: TColumn);
    procedure ransferirAvaria1Click(Sender: TObject);
    procedure insereItemNaAvaria();
    procedure atualizaItemAvaria();
    procedure atualizaValorDaAvaria();


  private
    { Private declarations }
  public
    { Public declarations }
  end;
var
  fmCadAvarias: TfmCadAvarias;
  operacao:String;
  isAcessoRestrito : boolean;

implementation

uses umain , fmAbrirAvarias, uCriaAvaria , uAprovaAvaria, f, uRelGeral, uCF ,
  uDm, uEstoque, uUsuarios, msg, uProd;

{$R *.dfm}

function TfmCadAvarias.isAvariaAprovada: boolean;
begin
   result := (copy(lbStatus.Caption, 01, 01) = 'A');
end;

procedure TfmCadAvarias.atualizaItemAvaria;
var
   cmd:String;
begin
   tbItensAv.Edit();
   tbItensAv.FieldByName({'quant'} 'estoqueDisponivel').AsString := edQuant.Text;
   tbItensAv.FieldByName('obs').AsString := edObs.Text;
   tbItensAv.FieldByName('pcoSugerido').AsFloat := edPcSugerido.Value;
   tbItensAv.FieldByName('Origem').AsString :=  cbOrigemAvaria.Items[cbOrigemAvaria.itemIndex] ;
   tbItensAv.FieldByName('Origem').AsInteger := cbOrigemAvaria.ItemIndex;
   tbItensAv.FieldByName('total').asfloat := strToFloat(edQuant.Text) * tbItensAv.FieldByName('preco').asfloat;


   cmd := dm.getCMD('ava','upItem');

   dm.setParams(cmd, lbIs_ref.Caption, edQuant.Text, QuotedStr(trim(edObs.Text)));
   dm.setParams(cmd, fmMain.getCdPesLogado(), f.valorSql(tbItensAv.FieldByName('total').AsFloat), ValorSql(edPcSugerido.Text));
   dm.setParam(cmd, lbRef.Caption);
{
   cmd := ' Update zcf_AvariasItens set '+
          ' Is_ref = ' + lbIs_ref.Caption  + ' , '+
          ' quant = ' + edquant.Text +' , '+
          ' obsItem = ' + QuotedStr(trim(edObs.Text)) +' , '+
          ' cd_pes = '+ fmMain.getCdPesLogado()   +' , '+
          ' pcoTotal= ' +  f.valorSql(tbItensAv.FieldByName('total').AsFloat) +  ', '+
          'pcoSugerido = ' + ValorSql(edPcSugerido.Text) +
          ' where ref = ' + lbRef.Caption;
}
   dm.execSQL(cmd);

end;


procedure TfmCadAvarias.insereItemNaAvaria;
var
  precos:Tstrings;
  identity:String;
  cmd:String;
begin //
   precos := TStringList.Create();
   precos := dm.getValoresSQL2(' select dbo.z_cf_funObterPrecoProduto_CF(005, '+ lbIs_ref.Caption + ', ' + lbuo.caption + ', 0) , ' +
                                    ' dbo.z_cf_funObterPrecoProduto_CF(005, '+ lbIs_ref.Caption + ', ' + lbuo.caption + ', 0) * '+ edQuant.Text +', ' +
                                    ' dbo.z_cf_funObterPrecoProduto_CF(101, '+ lbIs_ref.Caption + ', ' + lbuo.caption + ', 0) ',
                                    );

    cmd :=
    ' insert zcf_AvariasItens values ( ' +
    lbnumAvaria.Caption +',  '+
    lbUo.Caption +',  '+
    lbIs_ref.Caption  + ', '+
    edQuant.Text +',  '+
    f.ValorSql(precos[0]) +', ' +
    f.ValorSql(precos[1]) +', ' +
    QuotedStr(edObs.text) +',  '+
    intToStr(cbOrigemAvaria.ItemIndex) + ', ' +
    QuotedStr(ednResponsavel.text) + ', ' +
    fmMain.getCdPesLogado() + ', ' +
    f.ValorSql(precos[2]) +', ' +
    f.ValorSql(edPcSugerido.Text)+
    ', null, 0,' + lbUo.Caption +' )';

    identity :=  dm.openSQL(cmd, '@@identity');


   tbItensAv.AppendRecord([
      lbNumAvaria.Caption,
      lbCdref.Caption,
      EdDesc.Text,
      edQuant.Text,
      precos[0],
      precos[1],
      edObs.Text,
      lbIs_ref.Caption,
      identity,
      intToStr(cbOrigemAvaria.ItemIndex),
      cbOrigemAvaria.Items[cbOrigemAvaria.ItemIndex],
      ednResponsavel.text,
      fmMain.getCdPesLogado(),
      edPcSugerido.Text,
      precos[1]
   ]);
   precos.Free();
end;


procedure TfmCadAvarias.AbreFmPesqLista(tag:integer);
begin
   DesabilitaItens();
   if fmAbrirAvaria = nil then
   begin
      Application.CreateForm(TfmAbrirAvaria, fmAbrirAvaria);
      fmAbrirAvaria.Show;
      fmAbrirAvaria.preparaParaListarAvaria(tag);
   end;
end;

function TfmCadAvarias.VerificaPreenchimento(): String;
var
  Erro:String;
begin
   erro := '';
   if (lbuo.Caption <> fmMain.getUoLogada() ) and (fmMain.getUoLogada() <> '10033674') then
      Erro := erro + ' - So a loja que criou a avaria pode altera-la.' + #13;
   if edCodigo.Text = '' then
      Erro := erro + ' - Falta o código.' + #13;
   if edDesc.Text = '' then
      Erro := erro + ' - Falta a descrição.'+ #13;
   edQuant.Text := f.SohNumeros(edquant.Text);

   if edQuant.text = '' then
      Erro := erro + ' - Falta o a quantidade.'+ #13;

   if copy(LbTipo.Caption,01,03) <> 'Tot' then
      if (length(edObs.Text) < 5) then
         Erro := erro + ' - Falta o a observação do item.'+ #13;

   if (tbItensAv.Locate('is_ref', lbIs_ref.Caption,[]) = true) and (Operacao  = 'I') then
      Erro := erro + ' - Este item já existe.'+ #13;

   if (cbOrigemAvaria.ItemIndex < 0) then
      Erro := erro + ' - Informe a origem da avaria.'+ #13;

   if (f.tiraEspaco( ednResponsavel.Text) = '') and  (cbOrigemAvaria.ItemIndex = 1) then
      Erro := erro + ' - Informe o responsável, pela avaria.'+ #13;
   result := erro;
end;

procedure TfmCadAvarias.carregaItensAvarias(numero:string; loja:String);
var
  cmd:String;
begin
   if (tbItensAv.TableName <> '') then
     tbItensAv.Close();

   dm.getTable(tbItensAV,  dm.getCMD('ava', 'getTbItens') );
   tbItensAv.Close();

   cmd :=  dm.getCMD3('ava', 'loadTbItens', tbItensAv.TableName, numero, lbuo.Caption);

   dm.execSQL(cmd);

   pnOperacoes.Visible := not(isAvariaAprovada());
   tbItensAv.Open();

   //preenche o valor da avaria
   atualizaValorDaAvaria();

   lbTotal.Caption := dm.somaColTable(tbItensAv, 'Total', true);


   f.ajGridCol(Grid, tbItensAv, 'numAvaria', 0, '');
   f.ajGridCol(Grid, tbItensAv, 'is_ref', 0, '');
   f.ajGridCol(Grid, tbItensAv, 'cd_pes', 0, '');
   f.ajGridCol(Grid, tbItensAv, 'origem', 0, '');
   f.ajGridCol(Grid, tbItensAv, 'ref', 0, '');

   f.ajGridCol(grid, tbItensAv, 'Codigo', 55, 'Codigo');
   f.ajGridCol(grid, tbItensAv, 'Descricao', 304, '');
   f.ajGridCol(grid, tbItensAv, 'estoqueDisponivel', 37, 'Estoque');
   f.ajGridCol(grid, tbItensAv, 'Preco', 53, '');
   f.ajGridCol(grid, tbItensAv, 'Total', 53, '');
   f.ajGridCol(grid, tbItensAv, 'Obs', 143, '');
   f.ajGridCol(grid, tbItensAv, 'Responsavel', 68, '');
   f.ajGridCol(grid, tbItensAv, 'descOrigem', 53, 'Origem');
   f.ajGridCol(grid, tbItensAv, 'pcoSugerido', 68, 'Preco');
   f.ajGridCol(grid, tbItensAv, 'PcoVarejo', 99, 'pv Varejo');

   tbItensAv.First();
   grid.Visible := true;
end;

procedure TfmCadAvarias.carregarCabecalhoAvarias(numero,loja:string);
var
  ds:TdataSet;
begin
   ds := dm.getDataSetQ(' Exec zcf_ListarAvaria @numAvaria = '+ numero + ' , @uo = '+ loja + ' , @dtI= '''' , @dtF = '''' ');
   lbLoja.Caption := ds.fielDByName('Loja').AsString;
   lbDtAvaria.Caption := copy( ds.fielDByName('DataAvaria').AsString,01,10);
   lbStatus.Caption := ds.fielDByName('Aprovacao').AsString;
   lbNumAvaria.Caption := f.preencheCampo(05,'0','e', ds.fielDByName('Numero').AsString);
   mmObs.Lines.Clear;
   mmObs.Lines[0] :=  (ds.fieldByName('observacao').asString);
   lbtipo.Caption := ds.fielDByName('tipo').AsString;
   lbuo.Caption := ds.fielDByName('uo').AsString;
   lbdtAprov.caption := ds.fielDByName('dataAprovacao').AsString;
   pnTitulo.Visible := true;
   ds.free();
end;

procedure TfmCadAvarias.Nova1Click(Sender: TObject);
begin
   DesabilitaItens();
   Application.CreateForm(TfmCriarAvaria, fmCriarAvaria);
   fmCriarAvaria.show;
end;

procedure TfmCadAvarias.editaItenAvaria();
begin
   Operacao := 'A';
   LimparCampos();

   grid.Enabled := false;
   edCodigo.Text := tbItensAv.FieldByName('codigo').AsString;
   edcodigo.Enabled := false;
   edDesc.Text := tbItensAv.FieldByName('descricao').AsString;
   edPreco.Text := tbItensAv.FieldByName('preco').AsString;
   edQuant.Text := tbItensAv.FieldByName('estoqueDisponivel').AsString;
   edobs.Text:= trim( tbItensAv.FieldByName('Obs').AsString);
   lbIs_ref.caption := tbItensAv.FieldByName('is_ref').AsString;
   lbRef.Caption := tbItensAv.FieldByName('ref').AsString;
   cbOrigemAvaria.ItemIndex := strToInt(tbItensAv.FieldByName('origem').AsString);
   ednResponsavel.Text := tbItensAv.FieldByName('Responsavel').AsString;
   edPcSugerido.Text := tbItensAv.FieldByName('pcoSugerido').AsString;
   edPcSugerido.Enabled :=(copy(lbStatus.Caption, 01, 01) = 'A');
   lbCD_pes.Caption := dm.openSQL('select nm_usu from dsusu where cd_pes = ' + tbItensAv.FieldByName('cd_pes').AsString, 'nm_usu' );
   lbCD_pes.Visible := true;
   lbMNPes.Visible := true;

   if ( isAvariaAprovada() = true ) then
   begin
      edCodigo.Enabled := false;
      edcodigo.Enabled := false;
      edDesc.Enabled := false;
      edPreco.Enabled := false;
      edQuant.Enabled := false;
      edobs.Enabled := false;
      cbOrigemAvaria.Enabled := false;
      ednResponsavel.Enabled := false;
      edPcSugerido.Enabled :=(copy(lbStatus.Caption, 01, 01) = 'A');
      lbCD_pes.Enabled := false;
      lbMNPes.Enabled := false;
   end;
   edPcSugerido.Enabled := not(isAcessoRestrito);
end;

procedure TfmCadAvarias.edCodigoKeyDown(Sender: TObject; var Key: Word;  Shift: TShiftState);
var
   ds:TDataSet;
begin
   if (key = VK_RETURN )or(key = VK_TAB) then
   begin
      ds := uProd.getDadosProd( lbuo.Caption, edCodigo.Text, '', '5', true );
      if (ds.IsEmpty = false ) then
      begin
         edDesc.Text := ds.fieldByName('codigo').AsString +'-'+ds.fieldByName('descricao').AsString;
         lbIs_ref.Caption := ds.fieldByName('is_ref').AsString;
         lbCdref.Caption := ds.fieldByName('codigo').AsString;
      end;
      ds.Free();
   end;
end;

procedure TfmCadAvarias.BitBtn5Click(Sender: TObject);
begin
   if (tbItensAv.FieldByname('ref').AsString <> '') then
   begin
      dm.execSQL('delete from zcf_AvariasItens where ref= ' + tbItensAv.FieldByname('ref').AsString);
      tbItensAv.Delete();
      atualizaValorDaAvaria();
   end;
end;

procedure TfmCadAvarias.BitBtn1Click(Sender: TObject);
begin
   if (verificaPreenchimento() = '') then
   begin
      if Operacao = 'I' then
         insereItemNaAvaria();

      if Operacao = 'A' then
         atualizaItemAvaria();

      if ( isAvariaAprovada = false) then
         pnOperacoes.Visible := true;

      pnDados.Visible := false;
      pnConfirma.Visible := false;
      lbCD_pes.Visible := false;
      lbMNPes.Visible := false;
      grid.ReadOnly := false;

      atualizaValorDaAvaria();

      carregarCabecalhoAvarias(lbNumAvaria.Caption, lbuo.Caption);

      Grid.Enabled := true;
   end
   else
     msg.msgerro(VerificaPreenchimento());
end;

procedure TfmCadAvarias.btCancelaClick(Sender: TObject);
begin
    LimparCampos();
    tbItensAv.Cancel;

    if ( isAvariaAprovada = false) then
       pnOperacoes.Visible := true;
       
    pnDados.Visible := false;
    pnConfirma.Visible := false;
    grid.Enabled := true;
end;

procedure TfmCadAvarias.LimparCampos();
begin
   pnOperacoes.Visible := false;
   pnDados.Visible := true;
   pnConfirma.Visible := true;

   edCodigo.Text := '';
   edDesc.Text := '';
   edQuant.Text := '';
   edobs.Text:='';
   edPcSugerido.Text:='0';

   lbIs_ref.caption := '';
end;

procedure TfmCadAvarias.FormKeyPress(Sender: TObject; var Key: Char);
begin
   if (key = #13) then
   begin
       Perform (CM_DialogKey, VK_TAB, 0);
       key:=#0;
   end;
end;

procedure TfmCadAvarias.Abrir1Click(Sender: TObject);
begin
   AbreFmPesqLista(1);
end;

procedure TfmCadAvarias.Aprovar1Click(Sender: TObject);
var
  user:string;
begin
   if (tbItensAv.IsEmpty = false ) then
   begin
      user :=  uUsuarios.getAutorizadorWell('', dm.GetParamBD('avarias.grupoAprovador',''), '' );
      if (user  <> '') then
      begin
         Application.CreateForm(TfmAprovaAv, fmAprovaAv);
         fmAprovaAv.show;
         fmAprovaAv.lbUsAprovador.Caption := user;
      end;
   end;
end;

procedure TfmCadAvarias.DesabilitaItens();
begin
   tbItensAv.Close;
   grid.Visible := false;
   PnOperacoes.Visible := false;
   pnConfirma.Visible := false;
   pnTitulo.Visible := false;
end;


procedure TfmCadAvarias.EdDescEnter(Sender: TObject);
begin
   edCodigo.setFocus;
end;

procedure TfmCadAvarias.edQuantExit(Sender: TObject);
begin
   edQuant.Text := f.SohNumeros(edQuant.Text);
end;

procedure TfmCadAvarias.FormClose(Sender: TObject; var Action: TCloseAction);
begin
   if (fmAbrirAvaria <> nil) then
   begin
      fmAbrirAvaria.Close;
      fmAbrirAvaria := nil;
   end;

   if (tbItensAv.TableName <> '') then
      tbItensAv.Close();

   fmCadAvarias := nil;
   action := caFree;
end;

procedure TfmCadAvarias.Exportar1Click(Sender: TObject);
begin
   if (tbItensAv.IsEmpty = false ) then
      if (uUsuarios.getAutorizadorWell('', '13', '10000031') <> '') then
        dm.exportacaoDeTabela(tbItensAv, xtExcel, xsView, '');
end;

procedure TfmCadAvarias.GridCellClick(Column: TColumn);
begin
   if ( tbItensAv.IsEmpty = false) then
   begin
      btCancelaClick(nil);
      editaItenAvaria();
      Grid.ReadOnly := true;
   end;
end;

procedure TfmCadAvarias.FormResize(Sender: TObject);
begin
   grid.Width := fmCadAvarias.Width- 30;
end;

procedure TfmCadAvarias.Relatrios1Click(Sender: TObject);
begin
   DesabilitaItens();
   if fmRelGeral = nil then
   begin
      application.createForm( TfmRelGeral,  fmRelGeral);
      fmRelGeral.show();
      fmRelGeral.setPerfil(2);
   end;
end;

procedure TfmCadAvarias.Imprimirrelaodeavaria1Click(Sender: TObject);
begin
   DesabilitaItens();
   AbreFmPesqLista(2);
end;

procedure TfmCadAvarias.Vendadeprodutosavariados1Click(Sender: TObject);
begin
   DesabilitaItens();
   if (fmRelGeral = nil) then
   begin
      application.createForm( TfmRelGeral,  fmRelGeral);
      fmRelGeral.show();
      fmRelGeral.setPerfil(1);
   end;
end;

procedure TfmCadAvarias.FormActivate(Sender: TObject);
begin
   fmMain.verificaPermissao(fmCadAvarias.Menu.Items { fmMain.getTelasPermDoGrupo( fmMain.getGrupoLogado() )} );
   isAcessoRestrito := fmMain.isGrupoRestrito(fmMain.Cadastrodeavarias1.Tag);

   fmCadAvarias.Caption :=  fmMain.getCaptionNivelAcesso(fmCadAvarias.Caption, isAcessoRestrito );
end;

procedure TfmCadAvarias.GridTitleClick(Column: TColumn);
begin
   if ( grid.ReadOnly = false ) then
      dm.organizarTabela(tbItensAv, grid, column);
end;

procedure TfmCadAvarias.BitBtn3Click(Sender: TObject);
begin
   Operacao := 'I';
   LimparCampos();
   edCodigo.Enabled := true;
   edCodigo.setFocus;
end;


procedure TfmCadAvarias.ransferirAvaria1Click(Sender: TObject);
begin
   if (tbItensAv.IsEmpty = false) then
      DesabilitaItens();
     
   AbreFmPesqLista(4);
end;





procedure TfmCadAvarias.atualizaValorDaAvaria;
var
   cmd:String;
begin
   lbTotal.Caption := dm.somaColTable(tbItensAv, 'total', true);

   cmd := dm.getCMD2('ava', 'upVl', lbuo.Caption, lbNumAvaria.Caption );
   dm.execSQL(cmd);
end;

end.

